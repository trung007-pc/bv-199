@page "/user"
@attribute [Authorize]
@using ButtonType = Radzen.ButtonType
@inject UserManagerService _userManagerService;
@inherits BaseBlazorPage
@inject RoleManagerService _roleManagerService;
@inject UploadService _uploadService;
@inject IWebHostEnvironment _webHostEnvironment;
@inject DownloadFileService _downloadFile;
@using Contract.Identity.UserManager;
@using Core.Enum
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Hosting
@using WebClient.Service.JS
@using WebClient.Service.Roles
@using WebClient.Service.Upload
@using WebClient.Service.Users
@using Contract.Common.Excels;

<h3>@HeaderTitle</h3>

<div style="display: flex;justify-content: space-between;align-items: center">
    <div>
        <RadzenBreadCrumb >
            <RadzenBreadCrumbItem Path="/" Icon="home" Style="font-size: 20px"/>
            <RadzenBreadCrumbItem Text="@HeaderTitle" Style="font-weight: 300"/>
        </RadzenBreadCrumb>
    </div>

    <div style="display: flex;gap: 5px">
        <RadzenButton Text="Import Excel File" Icon="publish" Click="@ShowImportExcelFileModal"/>
        <RadzenButton Text="Create" Icon="add_circle_outline" Click="@ShowNewModal"/>
    </div>

</div>

<RZBR/>


<RadzenCard>
    <Row Style="display:flex;align-items: center">
        <Column ColumnSize="ColumnSize.Is2">
            <RadzenIcon Icon="calendar_today"/>
        </Column>

        <Column ColumnSize="ColumnSize.Is7">
            <RadzenTextBox Placeholder="Search..." Class="w-100"/>
        </Column>

        <Column ColumnSize="ColumnSize.Is3">
            <RadzenButton Text="Search" Icon="search"/>
        </Column>

    </Row>
</RadzenCard>

<RZBR/>


<RadzenCard>
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@UsersWithNav" TItem="UserWithNavigationPropertiesDto" ColumnWidth="300px"
                    AllowSorting="true"
                    FilterMode="FilterMode.Simple"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    IsLoading="IsLoading"
                    Filter="ShowLoading"
                    Sort="ShowLoading"
                    Style="width: 100%">
        <Columns>
            <RadzenDataGridColumn TItem="UserWithNavigationPropertiesDto" Property="UserDto.UserName" TextAlign="TextAlign.Center" Title="User Name" Width="160px"/>
            <RadzenDataGridColumn TItem="UserWithNavigationPropertiesDto" Property="UserDto.EmployeeCode" TextAlign="TextAlign.Center" Title="Employee Code" Width="160px"/>
            <RadzenDataGridColumn TItem="UserWithNavigationPropertiesDto" Property="UserDto.FirstName" TextAlign="TextAlign.Center" Title="First Name" Width="160px"/>
            <RadzenDataGridColumn TItem="UserWithNavigationPropertiesDto" Property="UserDto.LastName" TextAlign="TextAlign.Center" Title="Last Name" Width="160px"/>
            <RadzenDataGridColumn TItem="UserWithNavigationPropertiesDto" Property="UserDto.Gender" TextAlign="TextAlign.Center" Title="Gender" Width="160px"/>
            <RadzenDataGridColumn TItem="UserWithNavigationPropertiesDto" Property="UserDto.DOB" TextAlign="TextAlign.Center" Title="DOB" Width="160px"/>
            <RadzenDataGridColumn TItem="UserWithNavigationPropertiesDto" Property="UserDto.PhoneNumber" TextAlign="TextAlign.Center" Title="Phone Number" Width="160px"/>
            <RadzenDataGridColumn TItem="UserWithNavigationPropertiesDto" Property="UserDto.Email" TextAlign="TextAlign.Center" Title="Email" Width="160px"/>

            <RadzenDataGridColumn TItem="UserWithNavigationPropertiesDto" Filterable="false" Sortable="false" Property="RoleNames" Title="Roles" Width="160px">
                <Template Context="data">
                    @{ int i = 0; }
                    @foreach (var item in data.RoleNames)
                    {
                        <RadzenBadge BadgeStyle="ChooseColorByNumber(i)" IsPill="@true" Text="@item" Class="ml-2"/>
                        i++;
                    }

                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="UserWithNavigationPropertiesDto" Filterable="false" Property="UserDto.UserName" Title="Action" Frozen="true" Width="160px">
                <Template Context="data">
                    <RadzenButton Click="() => { ShowEditModal(data); }" Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium">
                    </RadzenButton>
                    <RadzenButton Click="async () => { await ShowConfirmMessage(data.UserDto.Id); }" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1">
                    </RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

</RadzenCard>

<Modal @ref="CreateModal">
    <ModalContent Size="ModalSize.Large" Centered="true" Scrollable="false">
        <ModalHeader>
            <ModalTitle>User</ModalTitle>
        </ModalHeader>
        <EditForm Model="NewUser" OnValidSubmit="async () => { await CreateUser(); }">
            <ModalBody Style="overflow: auto;padding: 20px">
                <DataAnnotationsValidator/>

                <Row>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3"> First Name </RadzenText>
                        <RadzenTextBox Class="w-100" @bind-Value="NewUser.FirstName"/>
                        <ValidationMessage For="@(() => NewUser.FirstName)"/>

                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3"> Last Name </RadzenText>
                        <RadzenTextBox Class="w-100" @bind-Value="NewUser.LastName"/>
                        <ValidationMessage For="@(() => NewUser.LastName)"/>

                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Employee Code </RadzenText>
                        <RadzenTextBox Class="w-100" @bind-Value="NewUser.EmployeeCode"/>
                        <ValidationMessage For="@(() => NewUser.EmployeeCode)"/>

                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">UserName</RadzenText>
                        <RadzenTextBox Class="w-100" @bind-Value="NewUser.UserName"/>
                        <ValidationMessage For="@(() => NewUser.UserName)"/>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Password</RadzenText>
                        <RadzenPassword Class="w-100" @bind-Value="NewUser.Password"/>
                        <ValidationMessage For="@(() => NewUser.Password)"/>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Enter again Password </RadzenText>
                        <RadzenPassword Class="w-100" @bind-Value="NewUser.PasswordConfirm"/>
                        <ValidationMessage For="@(() => NewUser.PasswordConfirm)"/>


                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Phone Number </RadzenText>
                        <RadzenTextBox Class="w-100" @bind-Value="NewUser.PhoneNumber"/>
                        <ValidationMessage For="@(() => NewUser.PhoneNumber)"/>


                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Email</RadzenText>
                        <RadzenTextBox Class="w-100" @bind-Value="NewUser.Email"/>
                        <ValidationMessage For="@(() => NewUser.Email)"/>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Date Of Birth</RadzenText>
                        <RadzenDatePicker @bind-Value=@NewUser.DOB DateFormat="dd/MM/yyyy" Class="w-100"/>
                        <ValidationMessage For="@(() => NewUser.DOB)"/>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Gender</RadzenText>
                        <RadzenRadioButtonList @bind-Value="NewUser.Gender" Style="display:flex;margin-bottom: 10px">
                            <Items>
                                @foreach (var item in (Gender[]) Enum.GetValues(typeof(Gender)))
                                {
                                    <RadzenRadioButtonListItem Text="@(item.GetDisplayDescription())" Value="item"/>
                                }
                            </Items>
                        </RadzenRadioButtonList>


                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Roles</RadzenText>
                        <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        @bind-Value=@SelectedRoles Multiple="true" Placeholder="Select..." Data=@RoleNames
                                        Change="OnCreateSelectedRoles" Class="w-100"/>
                    </Column>
                </Row>


            </ModalBody>
            <ModalFooter>
                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Clicked="@HideNewModal">Close</RadzenButton>
                <RadzenButton Text="Save Changes" ButtonType="ButtonType.Submit"/>
            </ModalFooter>
        </EditForm>
    </ModalContent>
</Modal>

<Modal @ref="EditModal">
    <ModalContent Size="ModalSize.Large" Centered="true">
        <ModalHeader>
            <ModalTitle>User</ModalTitle>
        </ModalHeader>
        <EditForm Model="EditUser" OnValidSubmit="async () => { await UpdateUser(); }">

            <ModalBody>
                <DataAnnotationsValidator/>
                <Row>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">

                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3"> First Name </RadzenText>
                        <RadzenTextBox Class="w-100" @bind-Value="EditUser.FirstName"/>
                        <ValidationMessage For="@(() => EditUser.FirstName)"/>

                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3"> Last Name </RadzenText>
                        <RadzenTextBox Class="w-100" @bind-Value="EditUser.LastName"/>
                        <ValidationMessage For="@(() => EditUser.LastName)"/>

                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Employee Code </RadzenText>
                        <RadzenTextBox Class="w-100" @bind-Value="EditUser.EmployeeCode"/>
                        <ValidationMessage For="@(() => EditUser.EmployeeCode)"/>

                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">UserName</RadzenText>
                        <RadzenTextBox Class="w-100" @bind-Value="EditUser.UserName"/>
                        <ValidationMessage For="@(() => EditUser.UserName)"/>

                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Phone Number </RadzenText>
                        <RadzenTextBox Class="w-100" @bind-Value="EditUser.PhoneNumber"/>
                        <ValidationMessage For="@(() => EditUser.PhoneNumber)"/>

                    </Column>

                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">


                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Email</RadzenText>
                        <RadzenTextBox Class="w-100" @bind-Value="EditUser.Email"/>
                        <ValidationMessage For="@(() => EditUser.Email)"/>
                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Date Of Birth</RadzenText>
                        <RadzenDatePicker @bind-Value=@EditUser.DOB DateFormat="dd/MM/yyyy" Class="w-100"/>
                        <ValidationMessage For="@(() => EditUser.DOB)"/>

                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Gender</RadzenText>
                        <RadzenRadioButtonList @bind-Value="EditUser.Gender" Style="display:flex;margin-bottom: 10px">
                            <Items>
                                @foreach (var item in (Gender[]) Enum.GetValues(typeof(Gender)))
                                {
                                    <RadzenRadioButtonListItem Text="@(item.GetDisplayDescription())" Value="item"/>
                                }
                            </Items>
                        </RadzenRadioButtonList>


                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Roles</RadzenText>
                        <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        @bind-Value=@SelectedRoles Multiple="true" Placeholder="Select..." Data=@RoleNames
                                        Change="OnEditSelectedRoles" Class="w-100"/>


                        <RZBR></RZBR>

                        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Style="display: inline">Set New Password</RadzenText>
                        <RadzenSwitch @bind-Value=@EditUser.IsSetPassword/>

                        @if (EditUser.IsSetPassword)
                        {
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Style="margin-top: 25px">Password</RadzenText>
                            <RadzenPassword Class="w-100" @bind-Value="EditUser.Password"/>
                            <ValidationMessage For="@(() => EditUser.Password)"/>
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Enter again Password </RadzenText>
                            <RadzenPassword Class="w-100" @bind-Value="EditUser.PasswordConfirm"/>
                            <ValidationMessage For="@(() => EditUser.PasswordConfirm)"/>
                        }
                    </Column>
                </Row>


            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideEditModal">Close</Button>
                <RadzenButton Text="Save Changes" ButtonType="ButtonType.Submit"/>
            </ModalFooter>
        </EditForm>
    </ModalContent>
</Modal>


<Modal @ref="ImportFileModal">
    <ModalContent Size="ModalSize.ExtraLarge" Centered="true">
        <ModalHeader>
            <ModalTitle>Import Excel File</ModalTitle>
        </ModalHeader>
        <EditForm Model="UserExcel" OnValidSubmit="async () => { await ImportUserDataOfExcel(); }">

            <ModalBody>
                <div style="display: flex;justify-content: left;gap: 5px">
                    <RadzenButton Text="Dowload An Instruction File" Icon="file_download" Click="@DownloadInstructionFileOfCreatingUser"/>

                    <RadzenButton Text="Dowload A Sample File" Icon="file_download" Click="@DownloadExcelSampleFileOfUser"/>
                    <RZInputFile Icon="upload_file"
                                 Accept=".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel"
                                 Style="display: flex;align-items: center;min-width:123px;max-width: 205px;margin: 0;cursor: pointer;background-color: #198754"
                                 Text="Choose An Excel File" Event="async (e) => { await OnChangeFile(e); }">
                    </RZInputFile>
                </div>


                @if (TriggeredWithoutFile)
                {
                    <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="true" Variant="Variant.Flat" Shade="Shade.Lighter">
                        You have not imported any a file at all
                    </RadzenAlert>
                }


                @if (!ExcelValidator.IsSuccessful)
                {
                    if (ExcelValidator.InvalidCells.Count > 0)
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="true" Variant="Variant.Flat" Shade="Shade.Lighter">
                            Invalid Format
                        </RadzenAlert>
                        <RadzenDataGrid AllowColumnResize="true" AllowAlternatingRows="false" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                        Data="@ExcelValidator.InvalidCells" TItem="Cell" ColumnWidth="300px"
                                        Style="width: 100%">
                            <Columns>
                                <RadzenDataGridColumn TItem="Cell" Property="Row" TextAlign="TextAlign.Center" Title="Row" Frozen="true" Width="160px"/>
                                <RadzenDataGridColumn TItem="Cell" Property="Col" TextAlign="TextAlign.Center" Title="Column" Frozen="true" Width="160px"/>


                            </Columns>
                        </RadzenDataGrid>
                    }
                    if (ExcelValidator.InvalidLogics.Count > 0)
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Warning" ShowIcon="true" Variant="Variant.Flat" Shade="Shade.Lighter">
                            Invalid Logics :
                            <ul>
                                @foreach (var item in ExcelValidator.InvalidLogics)
                                {
                                    <li>@item</li>
                                }
                            </ul>
                        </RadzenAlert>
                    }
                }







            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideEditModal">Close</Button>
                <RadzenButton Text="Save Changes" ButtonType="ButtonType.Submit"/>
            </ModalFooter>
        </EditForm>
    </ModalContent>
</Modal>